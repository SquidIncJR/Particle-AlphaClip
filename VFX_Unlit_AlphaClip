Shader "Unlit/VFX_Unlit_AlphaClip"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _AlphaClip("Alpha Clip", Range(0,1)) = 0.1
    }
    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }
        
        //Prepass that enables other transparency shaders to work
        //over this one
        Pass
        {
            ZWrite On
            ColorMask 0
        }
        
        //Typical base pass for a Unlit particle
        Pass
        {
        Blend SrcAlpha OneMinusSrcAlpha
        ZWrite Off
        LOD 100
            
        CGPROGRAM
        #pragma vertex vert
        #pragma fragment frag
        // make fog work
        #pragma multi_compile_fog

        #include "UnityCG.cginc"

        struct appdata
        {
            float4 vertex : POSITION;
            float2 uv : TEXCOORD0;
            half4 color : COLOR;
        };

        struct v2f
        {
            float2 uv : TEXCOORD0;
            UNITY_FOG_COORDS(1)
            float4 vertex : SV_POSITION;
            half4 particleCol : COLOR;
        };

        sampler2D _MainTex;
        float4 _MainTex_ST;
        half _AlphaClip;

        v2f vert (appdata v)
        {
            v2f o;
            o.vertex = UnityObjectToClipPos(v.vertex);
            o.uv = TRANSFORM_TEX(v.uv, _MainTex);
            o.particleCol = v.color;
            UNITY_TRANSFER_FOG(o,o.vertex);
            return o;
        }

        fixed4 frag (v2f i) : SV_Target
        {
            // sample the texture
            fixed4 col = tex2D(_MainTex, i.uv);
            // apply fog
            UNITY_APPLY_FOG(i.fogCoord, col);
            //Doing clip before the particle colour is applied to stop the particle just blipping from existance
            clip(col.a - _AlphaClip);
            
            //usual paricle colour multiplier from Particle System
            col *= i.particleCol;
            return col;
        }
        ENDCG
        }
    }
}

    

